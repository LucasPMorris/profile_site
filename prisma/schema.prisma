generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model projects {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String   @unique
  description String
  image       String
  link_demo   String?
  link_github String?
  stacks      String
  is_show     Boolean  @default(true)
  updated_at  DateTime @default(now())
  content     String?  @db.Text
  is_featured Boolean  @default(false)
}

model contentmeta {
  id         Int      @id @default(autoincrement())
  slug       String   @unique
  type       String
  views      Int      @default(0)
  updated_at DateTime @default(now())
}

model blogPost {
  id               Int      @id @default(autoincrement())
  date             DateTime
  modified         DateTime
  slug             String   @unique
  status           String
  link             String
  title            String
  contentHtml      String
  contentMarkdown  String
  contentProtected Boolean  @default(false)
  excerptHtml      String
  excerptProtected Boolean  @default(false)
  authorId         Int
  author           user     @relation(fields: [authorId], references: [user_id])
  featuredMediaId  Int?
  featuredMedia    media?   @relation("FeaturedMedia", fields: [featuredMediaId], references: [id])
  sticky           Boolean  @default(false)
  template         String
  format           String
  footnotes        String
  featuredImageUrl String?
  totalViewsCount  Int      @default(0)

  categories  category[]   @relation("PostCategories")
  tags        tag[]        @relation("PostTags")
  attachments attachment[]
  terms       term[]
}

model user {
  user_id         Int        @id @default(autoincrement())
  name            String
  username        String     @unique
  twitterUsername String?
  githubUsername  String?
  websiteUrl      String?
  profileImage    String?
  posts           blogPost[]
}

model category {
  id    Int        @id @default(autoincrement())
  name  String
  slug  String
  posts blogPost[] @relation("PostCategories")
}

model tag {
  id    Int        @id @default(autoincrement())
  name  String
  slug  String
  posts blogPost[] @relation("PostTags")
}

model media {
  id          Int        @id @default(autoincrement())
  url         String
  description String?
  posts       blogPost[] @relation("FeaturedMedia")
}

model attachment {
  id     Int      @id @default(autoincrement())
  href   String
  postId Int
  post   blogPost @relation(fields: [postId], references: [id])
}

model term {
  id         Int      @id @default(autoincrement())
  taxonomy   String
  embeddable Boolean  @default(true)
  href       String
  postId     Int
  post       blogPost @relation(fields: [postId], references: [id])
}

model spartist {
  artist_id  String @id
  name       String
  artist_url String?
  image_url  String?
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  // Relations  
  track_artists sptrackartist[]
  album_artists spalbumartist[]
  artist_stats  artiststat[]   

  // Performance Indexes
  @@index([name], name: "idx_spartist_name")
}

model spalbum {
  album_id     String    @id
  name         String
  image_url    String?
  release_date DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now()) @updatedAt

  // Relations
  tracks             sptrack[]           @relation
  common_album_tracks sptrack[]         @relation("CommonAlbum")
  album_artists      spalbumartist[]

  // Performance Indexes
  @@index([name], name: "idx_spalbum_name")
  @@index([release_date], name: "idx_spalbum_release_date")
}

model spalbumartist {
  album_id  String
  artist_id String

  // Relations
  album     spalbum  @relation(fields: [album_id], references: [album_id])
  artist    spartist @relation(fields: [artist_id], references: [artist_id])

  @@id([album_id, artist_id], name: "album_id_artist_id")
  @@index([album_id, artist_id], name: "idx_spalbumartist_album_artist")
  @@index([artist_id], name: "idx_spalbumartist_artist_id")
}


model sptrack {
  track_id         String   @id
  title            String
  isrc             String?
  album_id         String
  common_album_id  String?
  explicit         Boolean  @default(false)
  song_url         String?
  duration         Int?
  release_date     DateTime?
  created_at       DateTime @default(now())
  updated_at       DateTime @default(now()) @updatedAt

  // Relations
  album            spalbum           @relation(fields: [album_id], references: [album_id])
  common_album     spalbum?          @relation("CommonAlbum", fields: [common_album_id], references: [album_id])
  plays            spplayhistory[]
  track_artists    sptrackartist[]
  track_stats      trackstat[]

  // Performance Indexes
  @@index([isrc], name: "idx_sptrack_isrc")
  @@index([common_album_id], name: "idx_sptrack_common_album_id") 
  @@index([explicit], name: "idx_sptrack_explicit")
  @@index([album_id], name: "idx_sptrack_album_id")
}

model sptrackartist {
  track_id  String
  artist_id String

  // Relations
  track     sptrack  @relation(fields: [track_id], references: [track_id])
  artist    spartist @relation(fields: [artist_id], references: [artist_id])

  @@id([track_id, artist_id], name: "track_id_artist_id")
  @@index([track_id, artist_id], name: "idx_sptrackartist_track_artist")
  @@index([artist_id], name: "idx_sptrackartist_artist_id")
}

model spplayhistory {
  id         Int      @id @default(autoincrement())
  track_id   String
  played_at  DateTime
  created_at DateTime @default(now())

  // Relations
  track      sptrack  @relation(fields: [track_id], references: [track_id])

  // Composite unique constraint
  @@unique([track_id, played_at], name: "track_id_played_at")
  
  // Performance Indexes  
  @@index([played_at(sort: Desc), track_id], name: "idx_spplayhistory_played_at_track_id")
  @@index([played_at], name: "idx_spplayhistory_played_at")
  @@index([track_id], name: "idx_spplayhistory_track_id")
}

model spdailyplaystats {
  id           Int       @id @default(autoincrement())
  date         DateTime  @unique
  weekday      String
  hourly_plays Json
}

model yearbucket {
  id           Int           @id @default(autoincrement())
  year         Int
  range_start  DateTime
  range_end    DateTime
  monthbuckets monthbucket[]
  artiststats  artiststat[]  @relation("YearArtistStats")
  trackstats   trackstat[]   @relation("YearTrackStats")
}

model monthbucket {
  id           Int           @id @default(autoincrement())
  month        Int           // 1â€“12
  range_start  DateTime
  range_end    DateTime
  yearbucketid Int
  yearbucket   yearbucket    @relation(fields: [yearbucketid], references: [id])
  weekbuckets  weekbucket[]
  artiststats  artiststat[]  @relation("MonthArtistStats")
  trackstats   trackstat[]   @relation("MonthTrackStats")
}

model weekbucket {
  id            Int           @id @default(autoincrement())
  week          Int           // ISO week number
  range_start   DateTime
  range_end     DateTime

  monthbucketid Int
  monthbucket   monthbucket   @relation(fields: [monthbucketid], references: [id])

  daybuckets    daybucket[]   @relation("WeekToDayBuckets")

  artiststats   artiststat[]  @relation("WeekArtistStats")
  trackstats    trackstat[]   @relation("WeekTrackStats")
}

model daybucket {
  id           Int        @id @default(autoincrement())
  start_date   DateTime
  bucket_scope String @default("day")

  weekbucketid  Int?
  weekbucket    weekbucket?   @relation("WeekToDayBuckets", fields: [weekbucketid], references: [id])

  artiststats  artiststat[] @relation("DayArtistStats")
  trackstats   trackstat[] @relation("DayTrackStats")
}

model artiststat {
  id            Int       @id @default(autoincrement())
  artist_id     String
  stat_date     DateTime
  count         Int
  hourly_plays  Json?
  bucket_scope  String  @default("day")
  yearbucketid  Int?      
  monthbucketid Int?      
  weekbucketid  Int?
  daybucketid   Int?      
  artist        spartist  @relation(fields: [artist_id], references: [artist_id])
  yearbucket    yearbucket?   @relation("YearArtistStats", fields: [yearbucketid], references: [id])
  monthbucket   monthbucket?  @relation("MonthArtistStats", fields: [monthbucketid], references: [id])
  weekbucket    weekbucket?   @relation("WeekArtistStats", fields: [weekbucketid], references: [id])
  daybucket     daybucket? @relation("DayArtistStats", fields: [daybucketid], references: [id])

  @@unique([artist_id, weekbucketid])
  @@unique([artist_id, monthbucketid])
  @@unique([artist_id, yearbucketid])
  @@unique([artist_id, stat_date])
}

model trackstat {
  id            Int       @id @default(autoincrement())
  track_id      String
  stat_date     DateTime
  count         Int
  hourly_plays  Json?
  bucket_scope  String  @default("day")
  yearbucketid  Int?      
  monthbucketid Int?      
  weekbucketid  Int?
  daybucketid   Int?      
  track         sptrack   @relation(fields: [track_id], references: [track_id])
  yearbucket    yearbucket?   @relation("YearTrackStats", fields: [yearbucketid], references: [id])
  monthbucket   monthbucket?  @relation("MonthTrackStats", fields: [monthbucketid], references: [id])
  weekbucket    weekbucket?   @relation("WeekTrackStats", fields: [weekbucketid], references: [id])
  daybucket     daybucket?    @relation("DayTrackStats", fields: [daybucketid], references: [id])  

  @@unique([track_id, weekbucketid])
  @@unique([track_id, monthbucketid])
  @@unique([track_id, yearbucketid])
  @@unique([track_id, stat_date])  
}
